func <type var_type> <identifier id>:
	~INSERT @id, @var_type
	
func <identifier given_id>: value 
	return given_id
	
func <value given_value>: int 
	return given_value
	
func <int given_int>: value 
	return given_int
	
func <value given_value>: string 
	return given_value 
	
func <string given_string>: value 
	return given_string 
	
func <type var_type> <identifier id>: 
	~INSERT @id, @var_type 

func <identifier id> = <value val>: 
	~ASSIGN @id, @val

func <type var_type> <identifier id> = <value val>:
	~INSERT @id, @var_type 
	~ASSIGN @id, @val

func <int var1> + <int var2>: int 
	int temp 
	~IADD temp, @var1, @var2
	return temp 
	
func <int var1> - <int var2>: int 
	int temp 
	~ISUB temp, @var1, @var2 
	return temp 
	
func <int var1> gt <int var2>: bool 
	int temp 
	~GT temp, var1, var2
	return temp 
	
func <int var1> lt <int var2>: bool 
	int temp 
	~LT temp, var1, var2
	return temp 
	
func <int var1> eq <int var2>: bool 
	int temp 
	~EQ temp, var1, var2
	return temp

func <int var1> ge <int var2>: bool 
	int temp 
	~GE temp, var1, var2
	return temp 
	
func <int var1> le <int var2>: bool 
	int temp 
	~LE temp, var1, var2
	return temp 
	
func <int var1> ne <int var2>: bool 
	int temp 
	~NE temp, var1, var2
	return temp

block if <bool b>: 
	~BREQ b, 0, if_end
	~EXCON
	~LABEL if_end

func int input: int
	int temp
	~IINPUT temp
	return temp
	
func string input: string 
	string temp 
	~SINPUT temp 
	return temp 
	
block increase <identifier for_id> from <int start> to <int end> by <int incr>: 
	~ASSIGN @for_id, @start 
	~LABEL start_loop
	~BRGE @for_id, end, end_loop
	~EXCON
	~IADD @for_id, @for_id, @incr 
	~BR start_loop 
	~LABEL end_loop
	
block while <bool b>: 
	~LABEL start_loop 
	if b: 
		~EXCON
		~BR start_loop

func display <value val>: 
	~PRINT @val
	
func get <identifier id_name> from <value obj>: value 
	value temp
	~RETRIEVE temp, @obj, @id_name
	return temp

func set <identifier id> in <value obj> to <value v>: 
	~ATTRIBUTE @obj, @id, @v